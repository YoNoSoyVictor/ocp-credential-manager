---
# Clean up old/orphaned AWS access keys
# This step runs before key rotation to prevent conflicts

- name: Load command templates
  include_vars: "{{ playbook_dir }}/templates/command_templates.yml"

- name: List all users in AWS account with CCO prefix
  command: |
    {{ aws_cmd_prefix }} iam list-users --query 'Users[?starts_with(UserName, `{{ ocp_cco_rotation_config.iam_user_prefix }}`)].UserName' --output text
  register: cco_users_list
  environment: "{{ aws_env_vars }}"

- name: Parse CCO users list
  set_fact:
    cco_users: "{{ cco_users_list.stdout.split() if cco_users_list.stdout else [] }}"

- name: Display found CCO users
  debug:
    msg: "Found {{ cco_users | length }} CCO users: {{ cco_users }}"

- name: Get access keys for each CCO user
  command: "{{ aws_cmd_prefix }} iam list-access-keys --user-name {{ item }}"
  register: user_access_keys
  loop: "{{ cco_users }}"
  environment: "{{ aws_env_vars }}"

- name: Build comprehensive access key inventory
  set_fact:
    all_access_keys: "{{ all_access_keys | default([]) + [(item.item, (item.stdout | from_json).AccessKeyMetadata)] }}"
  loop: "{{ user_access_keys.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Display access key inventory
  debug:
    msg: "User {{ item.0 }} has {{ item.1 | length }} access keys"
  loop: "{{ all_access_keys }}"

- name: Identify orphaned users (not matching current cluster)
  set_fact:
    orphaned_users: "{{ cco_users | difference([cco_iam_user_name]) }}"

- name: Display orphaned users
  debug:
    msg: "Found {{ orphaned_users | length }} orphaned CCO users: {{ orphaned_users }}"

- name: Get creation date for orphaned access keys
  command: "{{ aws_cmd_prefix }} iam list-access-keys --user-name {{ item }} --query 'AccessKeyMetadata[*].[AccessKeyId,CreateDate]' --output text"
  register: orphaned_keys_info
  loop: "{{ orphaned_users }}"
  when: orphaned_users | length > 0
  environment: "{{ aws_env_vars }}"

- name: Create backup of orphaned keys before deletion
  copy:
    content: |
      ---
      cleanup_timestamp: "{{ ansible_date_time.iso8601 }}"
      cluster_id: "{{ ocp_cluster_id }}"
      orphaned_users: {{ orphaned_users | to_nice_yaml }}
      orphaned_keys_info: {{ orphaned_keys_info.results | to_nice_yaml }}
    dest: "backups/orphaned_keys_cleanup_{{ ansible_date_time.date }}_{{ ansible_date_time.time.replace(':', '-') }}.yml"
    mode: '0600'
  when: orphaned_users | length > 0 and safety_config.backup_old_credentials

- name: Delete access keys for orphaned users
  include_tasks: delete_user_access_keys.yml
  loop: "{{ all_access_keys }}"
  loop_control:
    loop_var: user_access_keys
    label: "{{ user_access_keys.0 }}"
  when: user_access_keys.0 in orphaned_users and user_access_keys.1 | length > 0

- name: Delete orphaned IAM users
  command: "{{ aws_cmd_prefix }} iam delete-user --user-name {{ item }}"
  loop: "{{ orphaned_users }}"
  when: orphaned_users | length > 0
  failed_when: false  # Continue even if user has attached policies
  environment: "{{ aws_env_vars }}"

- name: Set cleanup completion flag
  set_fact:
    cleanup_completed: true
    cleanup_timestamp: "{{ ansible_date_time.iso8601 }}"
    orphaned_users_cleaned: "{{ orphaned_users | length }}" 