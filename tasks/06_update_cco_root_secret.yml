---
# Update CCO Root Secret in OpenShift
# Injects the new AWS access key into the kube-system/aws-creds secret

- name: Backup current CCO root secret
  command: |
    oc get secret {{ ocp_cco_rotation_config.cco_secret_name }} 
    -n {{ ocp_cco_rotation_config.cco_secret_namespace }} 
    -o yaml
  register: current_cco_secret_backup
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Save current CCO secret backup
  copy:
    content: |
      # Backup of CCO secret before rotation
      # Timestamp: {{ ansible_date_time.iso8601 }}
      # Cluster: {{ ocp_cluster_id }}
      {{ current_cco_secret_backup.stdout }}
    dest: "backups/cco_secret_backup_{{ ansible_date_time.date }}_{{ ansible_date_time.time.replace(':', '-') }}.yml"
    mode: '0600'
  when: safety_config.backup_old_credentials

- name: Decode current CCO secret to verify structure
  command: |
    oc get secret {{ ocp_cco_rotation_config.cco_secret_name }} 
    -n {{ ocp_cco_rotation_config.cco_secret_namespace }} 
    -o jsonpath='{.data}'
  register: current_secret_data
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Parse current secret data
  set_fact:
    current_secret_json: "{{ current_secret_data.stdout | from_json }}"

- name: Display current secret keys (for verification)
  debug:
    msg: "Current CCO secret contains keys: {{ current_secret_json.keys() | list }}"

- name: Prepare new secret data
  set_fact:
    new_secret_data:
      aws_access_key_id: "{{ new_access_key_id | b64encode }}"
      aws_secret_access_key: "{{ new_secret_access_key | b64encode }}"

- name: Update CCO root secret with new credentials
  command: |
    oc patch secret {{ ocp_cco_rotation_config.cco_secret_name }} 
    -n {{ ocp_cco_rotation_config.cco_secret_namespace }} 
    --type='json' 
    -p='[{"op": "replace", "path": "/data/aws_access_key_id", "value": "{{ new_secret_data.aws_access_key_id }}"},
         {"op": "replace", "path": "/data/aws_secret_access_key", "value": "{{ new_secret_data.aws_secret_access_key }}"}]'
  register: secret_update_result
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Verify secret update was successful
  assert:
    that:
      - secret_update_result.rc == 0
    fail_msg: "Failed to update CCO root secret"

- name: Verify updated secret contains new credentials
  command: |
    oc get secret {{ ocp_cco_rotation_config.cco_secret_name }} 
    -n {{ ocp_cco_rotation_config.cco_secret_namespace }} 
    -o jsonpath='{.data.aws_access_key_id}' | base64 -d
  register: updated_secret_key_id
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Confirm new access key is in secret
  assert:
    that:
      - updated_secret_key_id.stdout == new_access_key_id
    fail_msg: "Secret was not updated with new access key ID"

- name: Add annotation to secret for tracking
  command: |
    oc annotate secret {{ ocp_cco_rotation_config.cco_secret_name }} 
    -n {{ ocp_cco_rotation_config.cco_secret_namespace }} 
    --overwrite
    credential-rotation/last-updated="{{ ansible_date_time.iso8601 }}"
    credential-rotation/access-key-id="{{ new_access_key_id }}"
    credential-rotation/managed-by="ansible"
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Wait for CCO to detect the credential change
  pause:
    seconds: 30

- name: Check cloud-credential operator status
  command: oc get clusteroperator cloud-credential -o json
  register: cco_status_check
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Parse CCO status
  set_fact:
    cco_status: "{{ cco_status_check.stdout | from_json }}"

- name: Display CCO status
  debug:
    msg:
      - "CCO Available: {{ cco_status.status.conditions | selectattr('type', 'equalto', 'Available') | map(attribute='status') | first }}"
      - "CCO Progressing: {{ cco_status.status.conditions | selectattr('type', 'equalto', 'Progressing') | map(attribute='status') | first }}"
      - "CCO Degraded: {{ cco_status.status.conditions | selectattr('type', 'equalto', 'Degraded') | map(attribute='status') | first }}"

- name: Set CCO secret update completion flag
  set_fact:
    cco_secret_update_completed: true
    cco_secret_update_timestamp: "{{ ansible_date_time.iso8601 }}" 