---
# Update CCO Root Secret in OpenShift
# Injects the new AWS access key into the kube-system/aws-creds secret

- name: Backup current CCO root secret
  command: "oc get secret {{ ocp_cco_rotation_config.cco_secret_name }} -n {{ ocp_cco_rotation_config.cco_secret_namespace }} -o yaml"
  register: current_cco_secret_backup
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Save current CCO secret backup
  copy:
    content: |
      # Backup of CCO secret before rotation
      # Timestamp: {{ ansible_date_time.iso8601 }}
      # Cluster: {{ ocp_cluster_id }}
      {{ current_cco_secret_backup.stdout }}
    dest: "backups/cco_secret_backup_{{ ansible_date_time.date }}_{{ ansible_date_time.time.replace(':', '-') }}.yml"
    mode: '0600'
  when: safety_config.backup_old_credentials

- name: Decode current CCO secret to verify structure
  command: "oc get secret {{ ocp_cco_rotation_config.cco_secret_name }} -n {{ ocp_cco_rotation_config.cco_secret_namespace }} -o jsonpath='{.data}'"
  register: current_secret_data
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Parse current secret data
  set_fact:
    current_secret_json: "{{ current_secret_data.stdout | from_json }}"

- name: Display current secret keys (for verification)
  debug:
    msg: "Current CCO secret contains keys: {{ current_secret_json.keys() | list }}"

- name: Prepare new secret data
  set_fact:
    new_secret_data:
      aws_access_key_id: "{{ new_access_key_id | b64encode }}"
      aws_secret_access_key: "{{ new_secret_access_key | b64encode }}"

- name: Debug secret update data
  debug:
    msg:
      - "Base64 encoded access key ID: {{ new_secret_data.aws_access_key_id }}"
      - "Base64 encoded secret key: {{ new_secret_data.aws_secret_access_key[:20] }}..."
      - "Decoded access key ID: {{ new_secret_data.aws_access_key_id | b64decode }}"

- name: Update CCO root secret with new credentials
  command: "oc patch secret {{ ocp_cco_rotation_config.cco_secret_name }} -n {{ ocp_cco_rotation_config.cco_secret_namespace }} --type='json' -p='[{\"op\": \"replace\", \"path\": \"/data/aws_access_key_id\", \"value\": \"{{ new_secret_data.aws_access_key_id }}\"},{\"op\": \"replace\", \"path\": \"/data/aws_secret_access_key\", \"value\": \"{{ new_secret_data.aws_secret_access_key }}\"}]'"
  register: secret_update_result
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Debug secret update result
  debug:
    msg:
      - "Update command exit code: {{ secret_update_result.rc }}"
      - "Update command stdout: {{ secret_update_result.stdout }}"
      - "Update command stderr: {{ secret_update_result.stderr if secret_update_result.stderr else 'None' }}"

- name: Verify secret update was successful
  assert:
    that:
      - secret_update_result.rc == 0
    fail_msg: "Failed to update CCO root secret"

- name: Debug secret existence and content
  shell: "oc get secret {{ ocp_cco_rotation_config.cco_secret_name }} -n {{ ocp_cco_rotation_config.cco_secret_namespace }} -o json"
  register: secret_debug
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"
  failed_when: false

- name: Display secret debug info
  debug:
    msg:
      - "Secret exists: {{ secret_debug.rc == 0 }}"
      - "Secret error (if any): {{ secret_debug.stderr if secret_debug.rc != 0 else 'None' }}"
      - "Secret data keys: {{ (secret_debug.stdout | from_json).data.keys() | list if secret_debug.rc == 0 else 'N/A' }}"

- name: Verify updated secret contains new credentials
  shell: "oc get secret {{ ocp_cco_rotation_config.cco_secret_name }} -n {{ ocp_cco_rotation_config.cco_secret_namespace }} -o jsonpath='{.data.aws_access_key_id}' | base64 -d"
  register: updated_secret_key_id
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Debug secret verification values
  debug:
    msg:
      - "Expected new access key ID: '{{ new_access_key_id }}'"
      - "Actual access key ID from secret: '{{ updated_secret_key_id.stdout }}'"
      - "Values match: {{ updated_secret_key_id.stdout == new_access_key_id }}"
      - "Expected length: {{ new_access_key_id | length }}"
      - "Actual length: {{ updated_secret_key_id.stdout | length }}"

- name: Confirm new access key is in secret
  assert:
    that:
      - updated_secret_key_id.stdout.strip() == new_access_key_id.strip()
    fail_msg: "Secret was not updated with new access key ID. Expected: '{{ new_access_key_id }}', Got: '{{ updated_secret_key_id.stdout }}'"

- name: Add annotation to secret for tracking
  command: "oc annotate secret {{ ocp_cco_rotation_config.cco_secret_name }} -n {{ ocp_cco_rotation_config.cco_secret_namespace }} --overwrite credential-rotation/last-updated='{{ ansible_date_time.iso8601 }}' credential-rotation/access-key-id='{{ new_access_key_id }}' credential-rotation/managed-by='ansible'"
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Wait for CCO to detect the credential change
  pause:
    seconds: 30

- name: Check cloud-credential operator status
  command: oc get clusteroperator cloud-credential -o json
  register: cco_status_check
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Parse CCO status
  set_fact:
    cco_status: "{{ cco_status_check.stdout | from_json }}"

- name: Display CCO status
  debug:
    msg:
      - "CCO Available: {{ cco_status.status.conditions | selectattr('type', 'equalto', 'Available') | map(attribute='status') | first }}"
      - "CCO Progressing: {{ cco_status.status.conditions | selectattr('type', 'equalto', 'Progressing') | map(attribute='status') | first }}"
      - "CCO Degraded: {{ cco_status.status.conditions | selectattr('type', 'equalto', 'Degraded') | map(attribute='status') | first }}"

- name: Set CCO secret update completion flag
  set_fact:
    cco_secret_update_completed: true
    cco_secret_update_timestamp: "{{ ansible_date_time.iso8601 }}" 