---
# Rotate CCO-managed component credentials
# Deletes existing secrets to trigger CCO re-minting with new root credentials

- name: Get all CredentialsRequest objects
  command: oc get credentialsrequest --all-namespaces -o json
  register: all_credentials_requests
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Parse CredentialsRequest objects
  set_fact:
    credentials_requests: "{{ all_credentials_requests.stdout | from_json }}"

- name: Filter AWS CredentialsRequest objects
  set_fact:
    aws_credentials_requests: "{{ credentials_requests.items | selectattr('spec.providerSpec.kind', 'equalto', 'AWSProviderSpec') | list }}"

- name: Display found CredentialsRequest objects
  debug:
    msg: "Found {{ aws_credentials_requests | length }} AWS CredentialsRequest objects"

- name: Extract secret references from CredentialsRequest objects
  set_fact:
    component_secrets: "{{ aws_credentials_requests | map(attribute='spec.secretRef') | list }}"

- name: Display component secrets to be rotated
  debug:
    msg: "Will rotate {{ component_secrets | length }} component secrets"

- name: Create backup of component secrets before deletion
  command: |
    oc get secret {{ item.name }} -n {{ item.namespace }} -o yaml
  register: component_secret_backups
  loop: "{{ component_secrets }}"
  loop_control:
    label: "{{ item.namespace }}/{{ item.name }}"
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Save component secret backups
  copy:
    content: |
      # Backup of component secret before rotation
      # Timestamp: {{ ansible_date_time.iso8601 }}
      # Cluster: {{ ocp_cluster_id }}
      # Secret: {{ item.item.namespace }}/{{ item.item.name }}
      {{ item.stdout }}
    dest: "backups/component_secret_{{ item.item.namespace }}_{{ item.item.name }}_{{ ansible_date_time.date }}_{{ ansible_date_time.time.replace(':', '-') }}.yml"
    mode: '0600'
  loop: "{{ component_secret_backups.results }}"
  loop_control:
    label: "{{ item.item.namespace }}/{{ item.item.name }}"
  when: safety_config.backup_old_credentials

- name: Delete component secrets to trigger re-minting
  command: |
    oc delete secret {{ item.name }} -n {{ item.namespace }} --ignore-not-found=true
  loop: "{{ component_secrets }}"
  loop_control:
    label: "{{ item.namespace }}/{{ item.name }}"
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Wait for CCO to start re-minting credentials
  pause:
    seconds: "{{ component_rotation_config.recreation_wait_time }}"

- name: Monitor secret recreation
  command: |
    oc get secret {{ item.name }} -n {{ item.namespace }} -o jsonpath='{.metadata.name}'
  register: secret_recreation_check
  loop: "{{ component_secrets }}"
  loop_control:
    label: "{{ item.namespace }}/{{ item.name }}"
  until: secret_recreation_check.rc == 0
  retries: "{{ component_rotation_config.max_recreation_wait // 30 }}"
  delay: 30
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Verify all secrets have been recreated
  assert:
    that:
      - item.rc == 0
    fail_msg: "Secret {{ item.item.namespace }}/{{ item.item.name }} was not recreated by CCO"
  loop: "{{ secret_recreation_check.results }}"
  loop_control:
    label: "{{ item.item.namespace }}/{{ item.item.name }}"

- name: Get new access key IDs from recreated secrets
  command: |
    oc get secret {{ item.name }} -n {{ item.namespace }} -o jsonpath='{.data.aws_access_key_id}' | base64 -d
  register: new_component_access_keys
  loop: "{{ component_secrets }}"
  loop_control:
    label: "{{ item.namespace }}/{{ item.name }}"
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"

- name: Display new access key IDs
  debug:
    msg: "Secret {{ item.item.namespace }}/{{ item.item.name }} has new access key: {{ item.stdout }}"
  loop: "{{ new_component_access_keys.results }}"
  loop_control:
    label: "{{ item.item.namespace }}/{{ item.item.name }}"

- name: Add rotation annotations to recreated secrets
  command: |
    oc annotate secret {{ item.name }} -n {{ item.namespace }} --overwrite
    credential-rotation/last-updated="{{ ansible_date_time.iso8601 }}"
    credential-rotation/access-key-id="{{ item.stdout }}"
    credential-rotation/managed-by="ansible"
  loop: "{{ component_secrets }}"
  loop_control:
    label: "{{ item.namespace }}/{{ item.name }}"
  environment:
    KUBECONFIG: "{{ ocp_cco_rotation_config.kubeconfig_path }}"
  vars:
    access_key_id: "{{ new_component_access_keys.results[ansible_loop.index0].stdout }}"

- name: Set component rotation completion flag
  set_fact:
    component_rotation_completed: true
    component_rotation_timestamp: "{{ ansible_date_time.iso8601 }}"
    rotated_components: "{{ component_secrets | map(attribute='name') | list }}" 