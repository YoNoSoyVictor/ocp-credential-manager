---
# Pre-flight checks for CCO credential rotation
# Verifies that all required CLI tools are available and properly configured

- name: Check if required CLI tools are installed
  command: "which {{ item.name }}"
  register: cli_tool_check
  failed_when: cli_tool_check.rc != 0
  loop: "{{ required_cli_tools }}"
  loop_control:
    label: "{{ item.name }}"

- name: Get CLI tool versions
  shell: "{{ item.version_command }}"
  register: cli_tool_versions
  loop: "{{ required_cli_tools }}"
  loop_control:
    label: "{{ item.name }}"

- name: Display CLI tool versions
  debug:
    msg: "{{ item.item.name }}: {{ item.stdout }}"
  loop: "{{ cli_tool_versions.results }}"
  loop_control:
    label: "{{ item.item.name }}"

- name: Check OpenShift cluster connectivity
  command: oc cluster-info {{ '--kubeconfig ' + kubeconfig_path if kubeconfig_path is defined else '' }}
  register: cluster_info
  failed_when: cluster_info.rc != 0

- name: Verify OpenShift admin privileges
  command: oc auth can-i "*" "*" --as=system:admin {{ '--kubeconfig ' + kubeconfig_path if kubeconfig_path is defined else '' }}
  register: admin_check
  failed_when: admin_check.rc != 0 or admin_check.stdout.strip() != "yes"

- name: Check AWS CLI configuration
  command: aws sts get-caller-identity {{ '--profile ' + aws_profile if aws_profile is defined else '' }}
  register: aws_identity
  failed_when: aws_identity.rc != 0
  environment:
    AWS_DEFAULT_REGION: "{{ ocp_cco_rotation_config.aws_region }}"

- name: Parse AWS caller identity
  set_fact:
    aws_caller_identity: "{{ aws_identity.stdout | from_json }}"

- name: Display AWS caller identity
  debug:
    msg:
      - "AWS Account ID: {{ aws_caller_identity.Account }}"
      - "AWS User ARN: {{ aws_caller_identity.Arn }}"
      - "AWS User ID: {{ aws_caller_identity.UserId }}"

- name: Check if using assumed role
  set_fact:
    is_assumed_role: "{{ 'assumed-role' in aws_caller_identity.Arn }}"

- name: Verify AWS IAM permissions for CCO operations (IAM User)
  command: |
    aws iam simulate-principal-policy 
    --policy-source-arn "{{ aws_caller_identity.Arn }}"
    --action-names {{ cco_required_policies[0].policy_document.Statement[0].Action | join(' ') }}
    --resource-arns "*"
    {{ '--profile ' + aws_profile if aws_profile is defined else '' }}
  register: iam_permissions_check
  failed_when: false  # Don't fail on this check
  when: not is_assumed_role
  environment:
    AWS_DEFAULT_REGION: "{{ ocp_cco_rotation_config.aws_region }}"

- name: Display IAM permission simulation result
  debug:
    msg: "IAM permission simulation: {{ 'PASSED' if iam_permissions_check.rc == 0 else 'FAILED - will verify during actual operations' }}"
  when: not is_assumed_role

- name: Skip IAM permission simulation for assumed roles
  debug:
    msg: 
      - "Skipping IAM permission simulation (using assumed role)"
      - "Permissions will be verified during actual AWS operations"
      - "Assumed Role ARN: {{ aws_caller_identity.Arn }}"
  when: is_assumed_role

- name: Test basic AWS IAM access
  command: aws iam list-users --max-items 1 {{ '--profile ' + aws_profile if aws_profile is defined else '' }}
  register: basic_iam_test
  failed_when: basic_iam_test.rc != 0
  environment:
    AWS_DEFAULT_REGION: "{{ ocp_cco_rotation_config.aws_region }}"

- name: Display basic IAM access result
  debug:
    msg: "Basic IAM access: PASSED"

- name: Check if CCO is in mint mode
  command: |
    oc get secret {{ ocp_cco_rotation_config.cco_secret_name }} 
    -n {{ ocp_cco_rotation_config.cco_secret_namespace }} 
    -o jsonpath='{.data.aws_access_key_id}'
    {{ '--kubeconfig ' + kubeconfig_path if kubeconfig_path is defined else '' }}
  register: current_cco_secret
  failed_when: current_cco_secret.rc != 0

- name: Verify CCO secret exists and is not empty
  assert:
    that:
      - current_cco_secret.stdout | length > 0
    fail_msg: "CCO aws-creds secret is empty or missing"

- name: Check cluster operators status
  command: oc get clusteroperators -o json {{ '--kubeconfig ' + kubeconfig_path if kubeconfig_path is defined else '' }}
  register: cluster_operators_status
  failed_when: cluster_operators_status.rc != 0

- name: Parse cluster operators status
  set_fact:
    cluster_operators: "{{ cluster_operators_status.stdout | from_json }}"

- name: Debug cluster operators structure
  debug:
    msg:
      - "cluster_operators type: {{ cluster_operators | type_debug }}"
      - "cluster_operators keys: {{ cluster_operators.keys() | list }}"

- name: Debug cluster operators items using dictionary access
  debug:
    msg:
      - "cluster_operators['items'] type: {{ cluster_operators['items'] | type_debug }}"
      - "cluster_operators['items'] length: {{ cluster_operators['items'] | length }}"

- name: Debug first operator item
  debug:
    var: cluster_operators['items'][0]
  when: cluster_operators['items'] | length > 0

- name: Get list of available cluster operators
  set_fact:
    available_operators: "{{ cluster_operators['items'] | map(attribute='metadata.name') | list }}"

- name: Display available cluster operators
  debug:
    msg: "Available cluster operators: {{ available_operators }}"

- name: Verify critical operators are available
  assert:
    that:
      - item in available_operators
    fail_msg: "Critical operator {{ item }} not found. Available operators: {{ available_operators }}"
  loop: "{{ verification_config.critical_operators }}"

- name: Create required directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "logs"
    - "logs/audit"
    - "backups"

- name: Set preflight check completion flag
  set_fact:
    preflight_checks_completed: true
    preflight_timestamp: "{{ ansible_date_time.iso8601 }}" 